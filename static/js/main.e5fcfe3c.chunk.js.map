{"version":3,"sources":["components/Forms.js","utils/hibp.js","utils/diceware.js","components/PasswordField.js","App.js","serviceWorker.js","index.js"],"names":["FormField","styled","div","styleErrorMessage","comp","ErrorMessageContainer","props","component","FullField","name","label","placeholder","type","htmlFor","id","field","cache","wordList","require","secureRandom","count","result","cryptoObj","window","crypto","msCrypto","rand","Uint32Array","skip","getRandomValues","generatePassword","length","words","i","rollResults","j","push","join","getWords","MeterSegment","color","MeterWrapper","getColor","level","segment","undefined","PasswordMeter","Suggestions","p","ErrMsg","PasswordField","onChange","form","values","email","useState","visible","setVisible","password","setPassword","setResult","error","setError","meterLevel","setMeterLevel","useEffect","userInputs","split","zxcvbn","console","log","feedback","warning","score","guesses_log10","discard","a","async","hash","sha1","toUpperCase","indexOf","fetch","substr","response","text","pwned","haveIBeenPwned","then","suggestions","style","display","justifyContent","fontWeight","href","onClick","pw","setFieldValue","e","target","value","map","w","tag","Button","App","className","initialValues","validate","errors","test","onSubmit","setSubmitting","setTimeout","alert","JSON","stringify","isSubmitting","isValid","disabled","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5fcfe3c.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components'\nimport * as formik from \"formik\";\n\nexport const FormField = styled.div`\n    width: 100%;\n    margin-bottom: 1.5em;\n`;\n\nconst ErrorMessage = props=><formik.ErrorMessage component={'div'} {...props}/>;\n\nexport const styleErrorMessage = comp => styled(comp)`\n  color: red;\n  font-size: .9em;\n`;\n\nexport const ErrorMessageContainer = styleErrorMessage(ErrorMessage);\n\nexport const FullField = ({ name, label, placeholder, type, ...props }) => {\n    return <FormField>\n        <label htmlFor={name}>{label}</label>\n        <input name={name} id={name} placeholder={placeholder} type={type} {...props.field} />\n        <ErrorMessageContainer name={props.field.name}/>\n    </FormField>\n};","import * as sha1 from \"sha1\";\n\nconst cache = [];\n\nexport const haveIBeenPwned = async password => {\n    const hash = sha1(password).toUpperCase();\n    if(cache.indexOf(hash)>=0)return true;\n    const response = await fetch(`https://api.pwnedpasswords.com/range/${hash.substr(0,5)}`);\n    const text = await response.text();\n    const pwned = text.indexOf(hash.substr(5)) >= 0;\n    if(pwned)cache.push(hash);\n    return pwned;\n};","const wordList = require('./wordlist');\n\n// See : https://www.reddit.com/r/crypto/comments/4xe21s/\n//\n// skip is to make result in this range:\n// 0 â‰¤ result < n* count < 2^31\n// (where n is the largest integer that satisfies this equation)\n// This makes result % count evenly distributed.\n//\n// P.S. if (((count - 1) & count) === 0) {...} is optional and for\n// when count is a nice binary number (2n). If this if statement is\n// removed then it might have to loop a few times. So it saves a\n// couple of micro seconds.\nfunction secureRandom(count) {\n    const cryptoObj = window.crypto || window.msCrypto;\n    const rand = new Uint32Array(1);\n    const skip = 0x7fffffff - 0x7fffffff % count;\n    let result;\n\n    if (((count - 1) & count) === 0) {\n        cryptoObj.getRandomValues(rand);\n        return rand[0] & (count - 1)\n    }\n\n    do {\n        cryptoObj.getRandomValues(rand);\n        result = rand[0] & 0x7fffffff\n    } while (result >= skip);\n\n    return result % count\n}\n\nexport function getWords(length) {\n    const words = [];\n\n    for (let i = 0; i < length; i += 1) {\n        const rollResults = [];\n\n        for (let j = 0; j < 5; j += 1) {\n            // roll a 6 sided dice\n            rollResults.push(secureRandom(6) + 1)\n        }\n\n        words.push(wordList[rollResults.join('')])\n    }\n\n    return words\n}\n\nexport function generatePassword(length = 5) {\n    return getWords(length).join(' ');\n}","import React, {useEffect, useState} from 'react'\nimport styled from 'styled-components'\nimport zxcvbn from 'zxcvbn'\nimport {FormField, styleErrorMessage} from './Forms';\nimport {haveIBeenPwned} from \"../utils/hibp\";\nimport {generatePassword} from \"../utils/diceware\";\n\nconst MeterSegment = styled.div`\n    height: 7px;\n    border-radius: 2px;\n    background: ${({color}) => color};\n`;\nconst MeterWrapper = styled.div`\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    gap: 4px;\n    margin-bottom: 8px;\n`;\n\nconst getColor = (level, segment) => {\n    if (level !== undefined) {\n        // All red\n        if (level === 0) return '#ff6678';\n\n        if (level === 1 && segment === 0) return '#ff6678';\n        if (level === 2 && segment <= 1) return '#ffaf21';\n        if (level === 3 && segment <= 2) return '#f8e024';\n        if (level === 4 && segment <= 3) return '#81d068';\n        if (level === 5) return '#81d068';\n    }\n    return '#e7e7e7';\n};\n\nconst PasswordMeter = ({level}) => {\n    return <MeterWrapper>\n        <MeterSegment color={getColor(level, 0)}/>\n        <MeterSegment color={getColor(level, 1)}/>\n        <MeterSegment color={getColor(level, 2)}/>\n        <MeterSegment color={getColor(level, 3)}/>\n        <MeterSegment color={getColor(level, 4)}/>\n    </MeterWrapper>\n};\n\nconst Suggestions = styled.p`\n  color: #888;\n  font-size: .9em;\n  margin: 8px 0 1.5em;\n`;\n\nconst ErrMsg = styleErrorMessage('div');\n\nexport const PasswordField = ({field: {onChange, ...field}, form: {values: {name, email}, ...form}}) => {\n    const [visible, setVisible] = useState(false);\n    const [password, setPassword] = useState('');\n    const [result, setResult] = useState();\n    const [error, setError] = useState();\n    const [meterLevel, setMeterLevel] = useState();\n    useEffect(() => {\n        let userInputs = [];\n        if (name) userInputs = [...userInputs,name,...name.split(' ')];\n        if (email) userInputs = [...userInputs,email,...email.split(/[.@]/)];\n\n        const result = zxcvbn(password, userInputs);\n        console.log({userInputs,result});\n        setResult(result);\n        setError(result.feedback.warning || undefined);\n        setMeterLevel(result.score === 0 ? 1 : (result.guesses_log10 >= 20 ? 5 : result.score));\n        let discard = false;\n        if (result.score > 2) {\n            haveIBeenPwned(password).then(pwned => {\n                if (!discard && pwned) {\n                    setResult({\n                        score: 0,\n                        guesses_log10: 0,\n                        feedback: {warning: '', suggestions: ['Use a different password']}\n                    });\n                    setError('This password has been leaked before');\n                    setMeterLevel(0);\n                }\n            });\n        }\n        return () => discard = true;\n    }, [password, name, email]);\n    return <FormField>\n        <label htmlFor=\"password\" style={{display: 'flex', justifyContent: 'space-between'}}>\n            Password\n            <div>\n                <button style={{fontWeight: 'normal'}} href=\"#\" onClick={() => {\n                    const pw = generatePassword();\n                    setPassword(pw);\n                    form.setFieldValue(field.name, pw);\n                    setVisible(true);\n                }}>generate</button>{' '}\n                <button style={{fontWeight: 'normal'}} href=\"#\"\n                   onClick={() => setVisible(!visible)}>{visible ? 'hide' : 'show'}</button>\n            </div>\n        </label>\n\n        <input id=\"password\" type={visible ? 'text' : 'password'} placeholder=\"Enter a strong password\" onChange={e => {\n            setPassword(e.target.value);\n            onChange(e);\n        }} {...field} />\n        <PasswordMeter level={meterLevel}/>\n        {error && <ErrMsg>{error}</ErrMsg>}\n        {result && result.feedback.suggestions.length > 0 && <Suggestions>\n            <b>Tips:</b><br/>\n            {result.feedback.suggestions.map((w, i) => <>{w}<br/></>)}\n        </Suggestions>}\n    </FormField>\n};\n\nexport default PasswordField","import React from 'react';\nimport './App.scss';\nimport PasswordField from './components/PasswordField';\nimport {FullField} from './components/Forms';\nimport {Field, Form, Formik} from \"formik\";\nimport zxcvbn from 'zxcvbn';\nimport styled from 'styled-components';\n\nexport const styledButton = tag => styled(tag)`\n  display: block;\n  width: 100%;\n  background: #77c563;\n  color: white;\n  padding: .75em 1.5em;\n  border-radius: 4px;\n  font-size: 1em;\n  transition: all .2s ease-in-out;\n  cursor: pointer;\n  font-weight: 700;\n  \n  &:hover, &:focus {\n    background: #67b058;\n  }\n  \n  &[disabled] {\n    background: transparent;\n    border: 1px solid #ccc;\n    color: #aaa;\n    cursor: not-allowed;\n  }\n`;\n\nconst Button = styledButton('button');\n\nfunction App() {\n    return <>\n        <header>\n            <p>This my attempt at a non-frustrating sign up form. It uses <a\n                href=\"https://github.com/dropbox/zxcvbn\">zxcvbn</a> and <a\n                href=\"https://haveibeenpwned.com/API/v3#PwnedPasswords\">\"Have I Been Pwned\"s password API</a> to check\n                the passwords and generates secure passwords using <a\n                    href=\"https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases\">EFFs diceware\n                    wordlist</a>.</p>\n        </header>\n        <main>\n            <div className=\"App\">\n                <h1>Create Account</h1>\n                <Formik\n                    initialValues={{email: '', password: ''}}\n                    validate={async values => {\n                        let errors = {};\n                        if (!values.email) {\n                            errors.email = 'Required';\n                        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n                            errors.email = 'Invalid email address';\n                        }\n                        if (!values.password) {\n                            errors.password = 'Required';\n                        } else if (zxcvbn(values.password).score < 3) {\n                            errors.password = 'Not safe enough'\n                        }\n                        return errors;\n                    }}\n                    onSubmit={(values, {setSubmitting}) => {\n                        setSubmitting(true);\n                        setTimeout(() => {\n                            alert(JSON.stringify(values, null, 2));\n                            setSubmitting(false);\n                        }, 400);\n                    }}\n                >\n                    {({isSubmitting,isValid}) => (\n                        <Form>\n                            <Field component={FullField} name=\"email\" placeholder=\"Enter your email adress\"\n                                   label=\"Email\"/>\n                            <Field component={PasswordField} name=\"password\"/>\n                            <Button type=\"submit\" disabled={isSubmitting || !isValid}>\n                                Submit\n                            </Button>\n                        </Form>\n                    )}\n                </Formik>\n            </div>\n        </main>\n    </>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}